// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract TokenBurner {
  mapping(address => uint) public balances;

  constructor() {
    balances[msg.sender] = 1000;
  }

  event Burned(address indexed user, uint amount);

  function burn(uint amount) external {
    require(balances[msg.sender] >= amount, "Enough tokens to burn");
    balances[msg.sender] -= amount;
    emit Burned(msg.sender, amount);
  }
}

// ‚úÖ –ó–∞–¥–∞—á–∞ 2: –°–∂–∏–≥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–æ–≤ (TokenBurner)

// üîπ –£—Å–ª–æ–≤–∏–µ:
// 	‚Ä¢	–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç (–Ω–µ ERC20), –≤ –∫–æ—Ç–æ—Ä–æ–º:
// 	‚Ä¢	msg.sender –ø–æ–ª—É—á–∞–µ—Ç 1000 —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ.
// 	‚Ä¢	–ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è burn(uint amount), –∫–æ—Ç–æ—Ä–∞—è —Å–∂–∏–≥–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ.
// 	‚Ä¢	–ó–∞–ø—Ä–µ—Ç–∏ —Å–∂–∏–≥–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.
// 	‚Ä¢	–î–æ–±–∞–≤—å —Å–æ–±—ã—Ç–∏–µ Burned(address user, uint amount).

// üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:
// 	‚Ä¢	–ò—Å–ø–æ–ª—å–∑—É–π mapping(address => uint)
// 	‚Ä¢	–í burn() —É–º–µ–Ω—å—à–∏ balances[msg.sender] -= amount
