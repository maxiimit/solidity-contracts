// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;

contract PiggyBank {
  address public owner;

  constructor() {
    owner = msg.sender;
  }

  event Deposited(address indexed from, uint amount);
  event Withdraw(address indexed to, uint amount);

  modifier onlyOwner() {
    require(msg.sender == owner, 'Only owner can do it!');
    _;
  }

  receive() external payable {
    emit Deposited(msg.sender, msg.value);
  }

  function getBalance() public view returns (uint) {
    return address(this).balance;
  }

  function openPiggyBank(address to, uint amount) external onlyOwner {
    (bool success, ) = to.call{value: amount}("");
    require(success, "Transfer failed!");
    emit Withdraw(to, amount);
  }
}


//  –ó–∞–¥–∞—á–∞ 1: –ö–æ–ø–∏–ª–∫–∞ (PiggyBank)

// –°–¥–µ–ª–∞–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –≥–¥–µ:
// 	‚Ä¢	–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ñ–∏—Ä (–¥–µ–ø–æ–∑–∏—Ç).
// 	‚Ä¢	–í–ª–∞–¥–µ–ª–µ—Ü (owner) –º–æ–∂–µ—Ç ‚Äú–≤—Å–∫—Ä—ã—Ç—å –∫–æ–ø–∏–ª–∫—É‚Äù –∏ –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
// 	‚Ä¢	–ü—Ä–∏ —ç—Ç–æ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –≤–µ–¥—ë—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å.
// 	‚Ä¢	–î–æ–±–∞–≤—å —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏ –≤—ã–≤–æ–¥–µ.

// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:
// 	‚Ä¢	–ò—Å–ø–æ–ª—å–∑—É–π address(this).balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
// 	‚Ä¢	–î–æ–±–∞–≤—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä onlyOwner.
// 	‚Ä¢	–î–æ–±–∞–≤—å receive() –∏–ª–∏ fallback() –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
